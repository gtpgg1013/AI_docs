exam
exam_new<-left_join(exam,tName,by="class")
exam_new
#세로방량 합치기 (행 합치기)
exam_all<-bind_rows(mid,final)
exam_all
final<-data.frame(sid=c(600,700,800,900,1000),
scoreFinal=c(70,90,50,70,100))
exam_all<-bind_rows(mid,final)
exam_all
final<-data.frame(sid=c(600,700,800,900,1000),
score=c(70,90,50,70,100))
exam_all<-bind_rows(mid,final)
exam_all
#방량 합치기 (행 합치기)
mid<-data.frame(sid=c(100,200,300,400,500),
score=c(90,90,50,70,100))
final<-data.frame(sid=c(600,700,800,900,1000),
score=c(70,90,50,70,100))
exam_all<-bind_rows(mid,final)
exam_all
source('C:/Users/user/Desktop/lecture_dir/rwork/20190515.R')
#결측치(누락값) 처리
df<-data.frame(sex=c("F","M",NA,"M","F"),
score=c(50,40,40,30,NA))
df
#<NA>는 문자열 타입의 벡터에서 이게 진짜 누락값이라는 뜻(문자열 NA일수도 있기 때문)
is.na(df)
table(is.na(df))
table(is.na(df$sex))
df<-data.frame(sex=factor(c("F","M",NA,"M","F")),
score=c(50,40,40,30,NA))
df
#결측치(누락값) 처리
df<-data.frame(sex=c("F","M",NA,"M","F"),
score=c(50,40,40,30,NA))
exam$class==1
#NA가 포함된 행 제거
df %>%
filter(is.na(score))
#NA가 아닌 행
df %>%
filter(!is.na(score))
#NA가 아닌 행
dfnomiss<-df %>%
filter(!is.na(score))
#NA가 포함된 행 제거
dfmiss<-df %>%
filter(is.na(score))
sum(dfnomiss$score)
dffull<-df %>%
filter(!is.na(score)&!is.na(sex))
dffull
df$id<-c(1:5)
dffull<-df %>%
filter(!is.na(score)&!is.na(sex))
dffull
dfnomiss2<-na.omit(df)
dfnomiss2
mean(df$score, na.rm=T)
exam[2,]
exam[2,"science"]
exam[2,]
exam[c(2,3,4,6,7),]
exam[c(2,3,4,6,7),"science"]
exam[c(2,3,4,6,7),"science"]<-NA
exam
exam %>%
summarise(meanSci=mean(science))
exam %>%
summarise(meanSci=mean(science,na.rm = T))
#결측치를 0으로 해놓은 사람들도 있기 때문에 데이터를 잘 들여다 봐야 함
#결측치 대체
#결측치를 평균으로 대체
ifelse(is.na(exam$science),mean(exam$math,exam$english),exam$science)
#결측치를 0으로 해놓은 사람들도 있기 때문에 데이터를 잘 들여다 봐야 함
#결측치 대체
#결측치를 평균으로 대체
ifelse(is.na(exam$science),sum(exam$math,exam$english)/2,exam$science)
#결측치를 0으로 해놓은 사람들도 있기 때문에 데이터를 잘 들여다 봐야 함
#결측치 대체
#결측치를 평균으로 대체
ifelse(is.na(exam$science),(exam$math+exam$english)/2,exam$science)
#결측치를 0으로 해놓은 사람들도 있기 때문에 데이터를 잘 들여다 봐야 함
#결측치 대체
#결측치를 평균으로 대체
exam$science<-ifelse(is.na(exam$science),(exam$math+exam$english)/2,exam$science)
exam
exam[c(2,3,4,6,7),"science"]<-NA
exam
#결측치를 평균으로 대체
exam$science<-ifelse(is.na(exam$science),mean(exam$science,na.rm = T),exam$science)
exam
table(is.na(exam$science))
exam[c(2,3,4,6,7),"science"]<-NA
#결측치를 0으로 해놓은 사람들도 있기 때문에 데이터를 잘 들여다 봐야 함
#결측치 대체
#결측치를 math와 eng의평균으로 대체
exam$science<-ifelse(is.na(exam$science),(exam$math+exam$english)/2,exam$science)
table(is.na(exam$science))
exam
data<-data.frame(g=c(1,2,3,-3,6),
s=c(5,4,3,3,2))
data
table(data)
summary(data)
table(data$g)
#이상치 -3을 찾은 후, NA로 대체
data<-ifelse(data$g==-3,NA,data&g)
#이상치 -3을 찾은 후, NA로 대체
data<-ifelse(data$g==-3,NA,data$g)
data
#s컬럼값이 3보다 작으면 NA처리
data<-ifelse(data$s<3,NA,data$s)
#s컬럼값이 3보다 작으면 NA처리
data<-ifelse(data$s<3,NA,data$s)
#s컬럼값이 3보다 작으면 NA처리
data$s<-ifelse(data$s<3,NA,data$s)
#s컬럼값이 3보다 작으면 NA처리
data$s<-ifelse(data$s<3,NA,data$s)
data
data<-data.frame(g=c(1,2,3,-3,6),
s=c(5,4,3,3,2))
#이상치 -3을 찾은 후, NA로 대체
data$g<-ifelse(data$g==-3,NA,data$g)
#s컬럼값이 3보다 작으면 NA처리
data$s<-ifelse(data$s<3,NA,data$s)
data
data %>%
filter(!is.na(g)&!is.na(s))
data %>%
filter(!is.na(g)&!is.na(s)) %>%
summarise(ms=mean(s))
boxplot(mpg$year)
boxplot(mpg$drv)
boxplot(mpg$hwy)
boxplot(mpg$cty)
summary(mpg$cty)
IQR<-5
new_mpg<-ifelse(mpg$cty>19+IQR*1.5,NA,
ifelse(mpg$cty<14-IQR*1.5,NA,mpg$cty))
boxplot(new_mpg$cty)
new_mpg<-mpg
new_mpg$cty<-ifelse(mpg$cty>19+IQR*1.5,NA,
ifelse(mpg$cty<14-IQR*1.5,NA,mpg$cty))
boxplot(new_mpg$cty)
boxplot(mpg$cty)
boxplot(new_mpg$cty)
boxplot(mpg$hwy)$stats
boxplot.stats(mpg$hwy)
mpg2<-mpg
mpg2$hwy<-ifelse(mpg$hwy<12|mpg>37,NA,mpg$hwy)
table(is.na(mpg$hwy))
table(is.na(mpg2$hwy))
mpg2
mpg2<-mpg
mpg2
table(mpg2)
str(mpg2)
mpg2$hwy<-ifelse(mpg$hwy<12|mpg>37,NA,mpg$hwy)
table(is.na(mpg2$hwy))
mpg2<-mpg
table(is.na(mpg2$hwy))
mpg2$hwy<-ifelse(mpg$hwy<12|mpg$hwy>37,NA,mpg$hwy)
table(is.na(mpg2$hwy))
#na를 제외한 후, (구동방식)hwy 평균
str(mpg)
mpg2 %>%
group_by(drv)
mpg2 %>%
group_by(drv) %>%
mean(hwy,na.rm=T)
mpg2 %>%
group_by(drv) %>%
summarize(hMean=mean(hwy,na.rm=T))
#as.factor() as.numeric() : 형변환 할 때 쓰는 함수들
x<-c("a","b","c")
str(x)
#나는 이놈이 character가 아니라 factor로 하고싶다!
as.factor(x)
#as.factor() as.numeric() : 형변환 할 때 쓰는 함수들
x<-c("a","b","c","c")
#나는 이놈이 character가 아니라 factor로 하고싶다!
as.factor(x)
#나는 이놈이 character가 아니라 factor로 하고싶다!
as.character(as.factor(x))
source('C:/Users/user/Desktop/lecture_dir/rwork/20190515.R', echo=TRUE)
#나는 이놈이 character가 아니라 factor로 하고싶다!
str(as.character(as.factor(x)))
#자료구조 변환(행렬->DF)
matrix(1:6)
#자료구조 변환(행렬->DF)
matrix(1:6,ncol=2)
class(a)
#자료구조 변환(행렬->DF)
a<-matrix(1:6,ncol=2) #ncol값에 따라 행렬shape결정
class(a)
dfa<-as.data.frame(a)
class(dfa)
dfa<-as.data.frame(a)
class(dfa)
b<-data.frame(matric(1:10,ncol=5))
b<-data.frame(matrix(1:10,ncol=5))
b
as.factor(c("m","f"))
x<-1:5
class(x)
print(num)
for(int num in x){
print(num)
}
ifelse(x%%2==0,"even number","odd number")
for(i in x){
print(i)
}
print(i)
i<-0
while(i<10){
i<-i+1
print(i)
}
i<-0
while(i<10){
if(i>5){
break
}
i<-i+1
print(i)
}
x<-data.frame(a=c(1,2,3),
b=c("a",NA,"c"),
c=c("a","b",NA))
x
na.omit(x)
na.exclude(x)
na.pass(x)
df<-data.frame(x=1:5,y=seq(2,10,2))
df
resid(lm(y~x,data=df,na.action = na.omit))
resid(lm(y~x,data=df,na.action = na.exclude()))
resid(lm(y~x,data=df,na.action = na.exclude)
resid(lm(y~x,data=df,na.action = na.exclude))
#residual : 잔차 : 잔여값이 어느정도니? : 이 값들은 실제값과 생성된 모델 사이의 에러
resid(lm(y~x,data=df,na.action = na.omit))
resid(lm(y~x,data=df,na.action = na.exclude))
df[3,2]<-NA
#residual : 잔차 : 잔여값이 어느정도니? : 이 값들은 실제값과 생성된 모델 사이의 에러
resid(lm(y~x,data=df,na.action = na.omit))
resid(lm(y~x,data=df,na.action = na.exclude))
f(1,2)
f<-function(a,b){
print(a)
print(b)
}
f(1,2)
head(iris)
View(iris)
str(iris)
summary(iris)
iris3
library(help="datasets")
strAirPassengers)
str(AirPassengers)
Titanic
View(Titanic)
airquality
cars
library(dplyr)
library(readxl)
gender_submission<-read.csv("Data/titanic/gender_submission.csv")
gender_submission %>% head()
test<-read.csv("Data/titanic/test.csv")
train<-read.csv("Data/titanic/train.csv")
head(train)
head(test)
str(test)
str(train)
View(test)
View(train)
qplot(data=train,x=Age,y=PassengerId,color=Survived)
library(ggplot2)
qplot(data=train,x=Age,y=PassengerId,color=Survived)
table(test)
str(test)
table(test$sex)
table(test$sex)
table(test$cabin)
tess$cabin
test$cabin
test<-read.csv("Data/titanic/test.csv")
test$cabin
test$Cabin
table(test$Cabin)
str(test)
table(test$Sex)
table(test$Embarked)
library(ggplot2)
library(dplyr)
#1
nmpg<-mpg
nmpg<-nmpg %>% mutate(sumy=cty+hwy)
nmpg<-nmpg %>% mutate(avgy=sumy/2)
nmpg %>% arrange(desc(sumy)) %>% head(3)
#4
mpg<-mpg %>%
mutate(sumy=cty+hwy) %>%
mutate(avgy=sumy/2) %>%
arrange(desc(avgy)) %>%
head(3)
mpg %>%
mutate(sumy=cty+hwy) %>%
mutate(avgy=sumy/2) %>%
arrange(desc(avgy)) %>%
head(3)
#5
mpg %>%
group_by(class) %>%
summarize(meanCty=mean(cty)) %>%
arrange(desc(meanCty))
mpg
install.packages("ggplot2")
ggplot2{mpg}
mpg{ggplot2}
mpg {ggplot2}
mpg
remove.packages("ggplot2", lib="~/R/win-library/3.6")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
#5
mpg %>%
group_by(class) %>%
summarize(meanCty=mean(cty)) %>%
arrange(desc(meanCty))
mpg
#7
mpg
mpg %>%
group_by(manufacturer) %>%
summarize(meanHwy=mean(hwy)) %>%
arrange(desc(meanHwy)) %>%
head(3)
#8
mpg %>%
group_by(manufacturer) %>%
summarize(count=n()) %>%
arrange(desc(count))
#8
mpg %>%
group_by(manufacturer) %>%
filter(class=="compact") %>%
summarize(count=n()) %>%
arrange(desc(count))
#Q2
#1
popadult
#Q2
#1
popadults
#Q2
#1
midwest
midwest %>%
mutate(kidsPerAdult=1-(popadults/poptotal))
midwest$kidsPerAdult
midwest$kidsPerAdult<-midwest %>%
mutate(kidsPerAdult=1-(popadults/poptotal))
midwest$kidsPerAdult
#Q2
#1
midwest
midwest$kidsPerAdult<-midwest %>%
mutate(kidsPerAdult=1-(popadults/poptotal))
midwest$kidsPerAdult
midwest$kidsPerAdult
midwest %>%
mutate(kidsPerAdult=1-(popadults/poptotal))
midwest$kidsPerAdult
midwest %>%
mutate(kidsPerAdult=1-(popadults/poptotal))
midwest$kidsPerAdult
midwest$popadults
midwest$poptotal
midwest %>%
mutate(kidsPerAdult=(1-(popadults/poptotal))*100)
#Q2
#1
str(midwest)
exam %>%
mutate(tot=math+english+science,
avg=tot/3) %>%
head
exam
midwest %>%
mutate(kidsPerAdult=(1-(popadults/poptotal))*100)
midwest$kidsPerAdult
df1<-midwest %>%
mutate(kidsPerAdult=(1-(popadults/poptotal))*100)
midwest$kidsPerAdult<-df1$kidsPerAdult
midwest$kidsPerAdult
#Q2
#1
str(midwest)
#2
midwest %>%
group_by(county) %>%
arrange(desc(kidsPerAdult)) %>%
head(5)
#Q2
#1
midwest
table(midwest$county)
#3
df1<-midwest %>%
mutate(kidRank=ifelse(kidsPerAdult>=40,"large",
ifelse(kidsPerAdult>=30,"middle","small")))
midwest$kidRank<-df1$kidRank
table(midwest$kidRank)
#4
df1<-midwest %>%
mutate(asianPerTotal=(popasian/poptotal)*100)
midwest$asianPerTotal<-df1$asianPerTotal
midwest %>%
arrange(asianPerTotal) %>%
summarize(state=state,county=county,asianPerTotal=asianPerTotal) %>%
tail(10)
midwest %>%
arrange(asianPerTotal) %>%
tail(10)
midwest %>%
select(state,county,asianPerTotal) %>%
arrange(asianPerTotal) %>%
tail(10)
#Q3
mpg<-as.data.frame(ggplot2::mpg)
mpg
mpg[c(65,124,131,153,212),"hwy"]<-NA
#1
is.na(mpg$drv)
#1
table(is.na(mpg$drv))
#1
table(is.na(mpg$drv))
table(is.na(mpg$hwy))
source('C:/Users/user/Desktop/lecture_dir/rwork/20190515_강태형.R', echo=TRUE)
#2
str(mpg)
mpg %>%
filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarize(meanHwy=mean(hwy))
#Q4
mpg<-as.data.frame(ggplot::mpg)
#Q4
mpg<-as.data.frame(ggplot2::mpg)
mpg[c(10,14,58,93),"drv"]
mpg[c(10,14,58,93),"drv"] <- "k"
mpg[c(29,43,129,203),"cty"]<-c(3,4,39,42)
#1
table(mpg$drv)
df1<-mpg %>%
filter(drv %in% c(4,"f","r"))
table(df1$drv)
mpg$drv<-df1$drv
mpg<-df1
#2
boxplot(mpg$cty)
#2
boxplot(mpg$cty)$stats
mpg<-mpg %>%
filter(mpg$cty<=26&mpg$cty>=9)
#2
boxplot(mpg$cty)$stats
#3
str(mpg)
source('C:/Users/user/Desktop/lecture_dir/rwork/20190515_강태형.R', echo=TRUE)
mpg %>%
group_by(drv) %>%
summarize(meanCty=mean(cty))
#summarize dplyr패키지에서 summary 역할,
exam %>% summarize(meanMath=mean(math))
#반별 수학점수의 평균 및 요약통계치를 알고싶다!
#반별로 그룹을 만들어 줘야 함 : group_by
exam %>%
group_by(class) %>%
summarize(meanMath=mean(math),
medianMath=median(math),
sumMath=sum(math),
count=n(), #n() : 관측치의 숫자
sdMath=sd(math),
minMath=min(math),
maxMath=max(math))
#제조사별, 구동방식별 그룹화
mpg %>%
group_by(manufacturer,drv) %>%
summarize(meanCty=mean(cty),
count=n()) %>%
head(20)
mpg %>%
group_by(manufacturer,drv,class) %>%
summarize(meanCty=mean(cty),
count=n()) %>%
head(20)
#자동차 제조사별로 그룹화
mpg %>%
group_by(manufacturer) %>%
filter(class=="suv") %>%
summarize(meanHwy=mean(hwy),
meanCty=mean(cty),
cnt=n()) %>%
arrange(desc(meanCty))
