myletters
myletters[i][1]<-strsplit(mystr[[1]][i],split="")
myletters<-list(rep(NA,6))
myletters
for(i in 1:5){
myletters[[i]][1]<-strsplit(mystr[[1]][i],split="")
}
paste(mywords,collapse = " ")
myletters
myletters<-list()
myletters
myletters[[i]]<-strsplit(mystr[[1]][i],split="")
myletters
print(strsplit(mystr[[1]][i],split=""))
print(strsplit(mystr[[1]][i],split=""))
#단어단위로 문장 분해
mysentence<-"Leaning R is so interesting"
mystr<-strsplit(mysentence,split=" ")
for(i in 1:5){
print(strsplit(mystr[[1]][i],split=""))
}
for(i in 1:5){
myletters[[i]]<-strsplit(mystr[[1]][i],split="")
}
myletters
rwiki<-"R is a programming language and free software environment for statistical computing and graphics
supported by the R Foundation for Statistical Computing.[6] The R language is widely used among statisticians
and data miners for developing statistical software[7] and data analysis.[8] Polls, data mining surveys,
and studies of scholarly literature databases show substantial increases in popularity in recent years.[9].
as of May 2019, R ranks 21st in the TIOBE index,a measure of popularity of programming languages.[10]
A GNU package,[11] source code for the R software environment is written primarily in C, Fortran and R itself
,[12] and is freely available under the GNU General Public License. Pre-compiled binary versions are provided
for various operating systems. Although R has a command line interface, there are several graphical user
interfaces, such as RStudio, an integrated development environment."
rwiki_para<-strsplit(rwiki,split="\n")
rwiki_para
myletters
mywords<-list()
for(i in 1:5){
mywords[i]<-paste(myletters[[i]],collapse = "")
}
mywords
mywords[i]<-paste(myletters[i],collapse = "")
for(i in 1:5){
mywords[i]<-paste(myletters[i],collapse = "")
}
mywords
mywords<-list()
for(i in 1:5){
mywords[i]<-paste(myletters[[i]],collapse = "")
}
mywords
mywords[i]<-paste(myletters[[i]], sep="")
for(i in 1:5){
mywords[i]<-paste(myletters[[i]], sep="")
}
mywords
rwiki<-"R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.[6] The R language is widely used among statisticians and data miners for developing statistical software[7] and data analysis.[8] Polls, data mining surveys, and studies of scholarly literature databases show substantial increases in popularity in recent years.[9]. as of May 2019, R ranks 21st in the TIOBE index, a measure of popularity of programming languages.[10]
A GNU package,[11] source code for the R software environment is written primarily in C, Fortran and R itself,[12] and is freely available under the GNU General Public License. Pre-compiled binary versions are provided for various operating systems. Although R has a command line interface, there are several graphical user interfaces, such as RStudio, an integrated development environment.[13][14]"
rwiki_para<-strsplit(rwiki,split="\n")
rwiki_para #class : list
#문단 -> 문장
strsplit(rwiki_para[[1]],split=".")
#문단 -> 문장
strsplit(rwiki_para[[1]],split="\.")
#문단 -> 문장
strsplit(rwiki_para[[1]],split="\\.")
myletters
myletters[i]<-strsplit(mystr[[1]][i],split="")
myletters
myletters<-list()
myletters[[i]]<-strsplit(mystr[[1]][i],split="")
for(i in 1:5){
myletters[[i]]<-strsplit(mystr[[1]][i],split="")
}
myletters
myletters<-list()
myletters[[i]]<-strsplit(mystr[[1]][i],split="")
myletters
myletters<-list()
for(i in 1:5){
myletters[[i]]<-strsplit(mystr[[1]][i],split="")
}
myletters
myletters<-list()
for(i in 1:5){
myletters[[i]]<-strsplit(mystr[[1]][i],split="")
}
myletters
myletters[i]<-strsplit(mystr[[1]][i],split="")
myletters
myletters<-list()
for(i in 1:5){
myletters[i]<-strsplit(mystr[[1]][i],split="")
}
myletters
mywords<-list()
for(i in 1:5){
mywords[i]<-paste(myletters[[i]], sep="")
}
mywords[i]<-paste(myletters[[1]][i], sep="")
for(i in 1:5){
mywords[i]<-paste(myletters[[1]][i], sep="")
}
mywords
for(i in 1:5){
mywords[i]<-paste(myletters[[i]], sep="")
}
myletters
myletters
mywords[i]<-paste(myletters[[1]][i], sep="")
for(i in 1:5){
mywords[i]<-paste(myletters[[1]][i], sep="")
}
mywords
for(i in 1:5){
mywords[i]<-paste(myletters[[i]][5], sep="")
}
mywords
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]][5], sep="")
}
mywords<-list()
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]][5], sep="")
}
mywords
myletters
mywords<-list()
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]][1], sep="")
}
mywords
myletters
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]], sep="")
}
mywords
mywords[i]<-paste(myletters[[i]], sep="")
for(i in 1:5){
mywords[i]<-paste(myletters[[i]], sep="")
}
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]], sep="")
}
mywords
mywords[[i]]<-paste(myletters[[i]])
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]])
}
mywords
paste(mywords,collapse = " ")
mywords[[i]]<-paste(myletters[[i]])
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]])
}
mywords
paste(mywords,collapse = " ")
paste(mywords,collapse ="")
rwiki<-"R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing.[6] The R language is widely used among statisticians and data miners for developing statistical software[7] and data analysis.[8] Polls, data mining surveys, and studies of scholarly literature databases show substantial increases in popularity in recent years.[9]. as of May 2019, R ranks 21st in the TIOBE index, a measure of popularity of programming languages.[10]
A GNU package,[11] source code for the R software environment is written primarily in C, Fortran and R itself,[12] and is freely available under the GNU General Public License. Pre-compiled binary versions are provided for various operating systems. Although R has a command line interface, there are several graphical user interfaces, such as RStudio, an integrated development environment.[13][14]"
paste(mywords,collapse ="")
mywords
mywords<-list()
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]])
}
mywords
paste(mywords,collapse ="")
paste(mywords,collapse ="")
myletters
paste("a","b",sep="",collapse = ";")
mywords<-list()
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]])
}
mywords
paste(mywords,collapse =" ")
mywords
paste(mywords,collapse ="")
paste(mywords,collapse ="")
mywords<-list()
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]])
}
mywords
for(i in 1:5){
mywords[i]<-paste(myletters[[i]])
}
mywords
paste(mywords,collapse ="")
myletters
myletters[[1]]
for(i in 1:5){
mywords[i]<-paste(myletters[[i]], collapse = "")
}
mywords
class(strsplit(mystr[[1]][1],split=""))
paste("a","b",sep="",collapse = ";")
myletters
mywords<-list()
for(i in 1:5){
mywords[i]<-paste(myletters[[i]], collapse = "")
}
mywords
myletters[[1]]
for(i in 1:5){
mywords[[i]]<-paste(myletters[[i]], collapse = "")
}
mywords
paste(mywords,collapse ="")
paste(mywords,collapse =" ")
#문장->단어 분리
rwiki_sent
#문단 -> 문장
rwiki_sent<-strsplit(rwiki_para[[1]],split="\\.") # .(콜론)을 구분기호로 쓰고싶으면 \\. 해야함 (이미 예약어)
#문장->단어 분리
rwiki_sent
#문장->단어 분리
rwiki_sent[[1]][1]
#문장->단어 분리
rwiki_sent[[1]][1]
strsplit(rwiki_sent[[1]][1], split=" ")
strsplit(rwiki_sent)
strsplit(rwiki_sent,split="")
strsplit(rwiki_sent,split=" ")
#문장->단어 분리
rwiki_sent[[1]][1]
test="R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing"
str_replace_all(test,"a","X")
str_replace(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]",toupper)
str_replace_all("ang! gui! mo! tti!","\W"," ho! ")
str_replace_all("ang! gui! mo! tti!",\W," ho! ")
str_replace_all("ang! gui! mo! tti!","\W"," ho! ")
str_replace_all("ang! gui! mo! tti!","\\\W"," ho! ")
str_replace_all("ang! gui! mo! tti!","\\W"," ho! ")
txt<-str_replace_all(txt,"\\W"," ")
txt
#명사추출
extractNoun(txt)
#명사추출
res<-extractNoun(txt)
res
extractNoun("멀티캠퍼스 13층에서 수업을 즐겁게 듣는 중 입니다. 점심메뉴는 노랑통닭입니다.")
nouns<-extractNoun(txt)
nouns
table(nouns)
str(nouns)
table(unlist(nouns))
unlist(nouns)
class(unlist(nouns))
unlist(nouns)
#table함수를 제대로 쓰려면 list 하나당 결과값이 있어야 하는데 그게 아님
#그래서 unlist로 벡터화해야 함
wordcount<-table(unlist(nouns))
class(wordcount)
wordcount
df<-as.data.frame(wordcount)
df
df %>% arrange(desc(var1))
df %>% arrange(desc(Var1))
str(df)
df<-rename(df,word=Var1,freq=Freq)
df
head(df)
str(df)
nchar("hello")
df %>% filter(nchar(word)>=3)
df %>% filter(df,nchar(word)>=3)
nchar("hello")
nchar("1")
nchar(1)
df<-as.data.frame(wordcount,stringsAsFactors = F)
df %>% arrange(desc(Var1))
str(df)
df<-rename(df,word=Var1,freq=Freq)
head(df)
nchar("hello")
nchar(1)
df %>% filter(df,nchar(word)>=3)
str(df)
filter(df,nchar(word)>=3)
filter(df,nchar(word)>=11)
filter(df,nchar(word)>=5)
filter(df,nchar(word)>=3)
df %>% filter(nchar(word)>=3)
df %>% filter(nchar(word)>=7)
df %>% filter(nchar(word)>=2)
df %>% filter(nchar(word)>=2)
df %>%
filter(nchar(word)>=2) %>%
arrange(freq)
df %>%
filter(nchar(word)>=2) %>%
arrange(freq) %>%
head(10)
df %>%
filter(nchar(word)>=2) %>%
arrange(desc(freq)) %>%
head(10)
install.packages("wordcloud")
library(wordcloud)
pal<-brewer.pal(8,"Dark2")
wordcloud(df$word,df$freq)
wordcloud(words=df$word,freq=df$freq,min.freq = 3,max.words = 25)
df<-filter(df,nchar(word)>=3)
wordcloud(words=df$word,freq=df$freq,min.freq = 3,max.words = 100)
wordcloud(words=df$word,freq=df$freq,min.freq = 3,max.words = 100)
wordcloud(words=df$word,freq=df$freq,min.freq = 3,max.words = 100,ordered.colors = pal)
wordcloud(words=df$word,freq=df$freq,min.freq = 3,max.words = 100,colors = pal)
wordcloud(words=df$word,freq=df$freq,min.freq = 4,max.words = 100,colors = pal)
bol4<-read.table("Data/bol4.txt")
bol4<-read.table("Data/bol4.txt")
wordcloud(words=df$word,freq=df$freq,min.freq = 4,max.words = 100,colors = pal,scale = c(4,0.3))
wordcloud(words=df$word,freq=df$freq,min.freq = 4,max.words = 100,colors = pal,scale = c(4,1))
bol4<-read.table("Data/bol4.txt",header = F)
bol4<-read.table("Data/bol4.txt",header = T)
bol4<-readLines("Data/bol4.txt")
bol4
wordcloud(words=df$word,freq=df$freq,min.freq = 4,max.words = 100,colors = pal,scale = c(4,1),random.order = F)
list(bol4)
myletters<-list()
read.csv("Data/twitter.csv",header=T)
mywords<-list()
mywords[i]<-strsplit(bol4,split=" ")
mywords[[i]]<-strsplit(bol4,split=" ")
for(i in 1:216){
mywords[[i]]<-strsplit(bol4,split=" ")
}
mywords
mywords<-list()
mywords[i]<-strsplit(bol4,split=" ")
for(i in 1:216){
mywords[i]<-strsplit(bol4,split=" ")
}
mywords
bol4
read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text<-read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text
text<-read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text<-read.csv("Data/twitter1.csv",header=T,fileEncoding = "UTF-8")
text<-read.csv("Data/twitter1.csv",header=T,fileEncoding = "UTF-8")
text<-read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text
bol4
strsplit(bol4[1],split=" ")
mywords[[i]]<-strsplit(bol4[i],split=" ")
mywords
mywords<-list()
for(i in 1:216){
mywords[i]<-strsplit(bol4[i],split=" ")
}
mywords
unlist(mynouns)
unlist(mywords)
words_bol4<-unlist(mywords)
table(words_bol4)
df<-as.data.frame(table(words_bol4),stringsAsFactors = F)
df
df %>%
arrange(desc(Freq)) %>%
filter(Freq>=3)
df %>%
arrange(desc(Freq)) %>%
filter(nchar(words_bol4)>=3)
df %>%
arrange(desc(Freq)) %>%
filter(nchar(words_bol4)>=3) %>%
head(40)
df %>%
arrange(desc(Freq)) %>%
filter(nchar(words_bol4)>=3) %>%
head(8)
text
str(text)
text<-rename(text,no=번호,id=계정이름,date=작성일,tw=내용)
str(text)
str_replace_all(text$tw,"\\w"," ")
str_replace_all(text$tw,"\\W"," ")
text$tw<-str_replace_all(text$tw,"\\W"," ")
head(text$tw)
nouns<-extractNoun(text$tw)
nouns
words<-unlist(nouns)
words
table(words)
df<-as.data.frame(table(words))
df
str(df)
df %>%
filter(nchar(words)>=5) %>%
arrange(desc(Freq)) %>%
head(12)
df<-as.data.frame(table(words),stringsAsFactors = F)
str(df)
df %>%
filter(nchar(words)>=5) %>%
arrange(desc(Freq)) %>%
head(12)
filter(df, nchar(words)>=2)
dfword<-filter(df, nchar(words)>=2)
dfword
df %>%
filter(nchar(words)>=5) %>%
arrange(desc(Freq)) %>%
head(12)
df %>%
filter(nchar(words)>=2) %>%
arrange(desc(Freq)) %>%
head(12)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(desc(Freq)) %>%
head(20)
arrange(top20,Freq)$word
top20
arrange(top20,Freq)$word
arrange(top20,desc(Freq))$word
order<-arrange(top20,desc(Freq))$word
ggplot(data=top20,aes(x=words,y=Freq))
ggplot(data=top20,aes(x=words,y=Freq)) + geom_bar()
ggplot(data=top20,aes(x=words,y=Freq)) + geom_line()
ggplot(data=top20,aes(x=words,y=Freq)) + geom_Line()
ggplot(data=top20,aes(x=words,y=Freq)) + geom_
ggplot(data=top20,aes(x=words,y=Freq)) + geom_col()
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq)) + geom_col()
ggplot(data=top20,aes(x=words,y=Freq)) + geom_col() + ylim(0,2500)
top20<-arrange(top20,desc(Freq))
top20
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
head(20)
top20
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)
df<-as.data.frame(table(words),stringsAsFactors = F) #vector->table(빈도수)->df(factor없이)
str(df)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
head(20)
dfword<-filter(df, nchar(words)>=2)
dfword
top20
dfword<-filter(df, nchar(words)>=2)
dfword
top20
#요 흐름대로 하면 어렵지 않게 단어들을 추출해 낼 수 있다
text<-read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text
str(text)
text<-rename(text,no=번호,id=계정이름,date=작성일,tw=내용)
str(text)
text$tw<-str_replace_all(text$tw,"\\W"," ")
head(text$tw)
nouns<-extractNoun(text$tw) #list형식으로 명사들 뽑아내고
nouns
words<-unlist(nouns) #list 형식을 vector로 전환!
words
df<-as.data.frame(table(words),stringsAsFactors = F) #vector->table(빈도수)->df(factor없이)
str(df)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
tail(20)
dfword<-filter(df, nchar(words)>=2)
dfword
order<-arrange(top20,desc(Freq))$word
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)+
coord_flip()
wordcloud(words=df$words,
freq = Freq,
colors=pal)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal)
