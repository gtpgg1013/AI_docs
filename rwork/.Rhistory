words
table(words)
df<-as.data.frame(table(words))
df
str(df)
df %>%
filter(nchar(words)>=5) %>%
arrange(desc(Freq)) %>%
head(12)
df<-as.data.frame(table(words),stringsAsFactors = F)
str(df)
df %>%
filter(nchar(words)>=5) %>%
arrange(desc(Freq)) %>%
head(12)
filter(df, nchar(words)>=2)
dfword<-filter(df, nchar(words)>=2)
dfword
df %>%
filter(nchar(words)>=5) %>%
arrange(desc(Freq)) %>%
head(12)
df %>%
filter(nchar(words)>=2) %>%
arrange(desc(Freq)) %>%
head(12)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(desc(Freq)) %>%
head(20)
arrange(top20,Freq)$word
top20
arrange(top20,Freq)$word
arrange(top20,desc(Freq))$word
order<-arrange(top20,desc(Freq))$word
ggplot(data=top20,aes(x=words,y=Freq))
ggplot(data=top20,aes(x=words,y=Freq)) + geom_bar()
ggplot(data=top20,aes(x=words,y=Freq)) + geom_line()
ggplot(data=top20,aes(x=words,y=Freq)) + geom_Line()
ggplot(data=top20,aes(x=words,y=Freq)) + geom_
ggplot(data=top20,aes(x=words,y=Freq)) + geom_col()
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq)) + geom_col()
ggplot(data=top20,aes(x=words,y=Freq)) + geom_col() + ylim(0,2500)
top20<-arrange(top20,desc(Freq))
top20
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
head(20)
top20
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)
df<-as.data.frame(table(words),stringsAsFactors = F) #vector->table(빈도수)->df(factor없이)
str(df)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
head(20)
dfword<-filter(df, nchar(words)>=2)
dfword
top20
dfword<-filter(df, nchar(words)>=2)
dfword
top20
#요 흐름대로 하면 어렵지 않게 단어들을 추출해 낼 수 있다
text<-read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text
str(text)
text<-rename(text,no=번호,id=계정이름,date=작성일,tw=내용)
str(text)
text$tw<-str_replace_all(text$tw,"\\W"," ")
head(text$tw)
nouns<-extractNoun(text$tw) #list형식으로 명사들 뽑아내고
nouns
words<-unlist(nouns) #list 형식을 vector로 전환!
words
df<-as.data.frame(table(words),stringsAsFactors = F) #vector->table(빈도수)->df(factor없이)
str(df)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
tail(20)
dfword<-filter(df, nchar(words)>=2)
dfword
order<-arrange(top20,desc(Freq))$word
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)+
coord_flip()
wordcloud(words=df$words,
freq = Freq,
colors=pal)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal)
library(ggplot2)
library(dplyr)
library(KoNLP)
library(dplyr)
library(rJava)
text<-read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text
str(text)
text<-rename(text,no=번호,id=계정이름,date=작성일,tw=내용)
str(text)
text$tw<-str_replace_all(text$tw,"\\W"," ")
head(text$tw)
nouns<-extractNoun(text$tw) #list형식으로 명사들 뽑아내고
nouns
words<-unlist(nouns) #list 형식을 vector로 전환!
words
df<-as.data.frame(table(words),stringsAsFactors = F) #vector->table(빈도수)->df(factor없이)
str(df)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
tail(20)
dfword<-filter(df, nchar(words)>=2)
dfword
top20
order<-arrange(top20,desc(Freq))$word
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)+
coord_flip()
pal<-brewer.pal(8,"Dark2")
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 10,
max.words = 100,
scale = 3,
random.color = T,
random.order = T)
library(wordcloud)
text<-read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text
str(text)
text<-rename(text,no=번호,id=계정이름,date=작성일,tw=내용)
str(text)
text$tw<-str_replace_all(text$tw,"\\W"," ")
head(text$tw)
nouns<-extractNoun(text$tw) #list형식으로 명사들 뽑아내고
nouns
words<-unlist(nouns) #list 형식을 vector로 전환!
words
df<-as.data.frame(table(words),stringsAsFactors = F) #vector->table(빈도수)->df(factor없이)
str(df)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
tail(20)
dfword<-filter(df, nchar(words)>=2)
dfword
top20
order<-arrange(top20,desc(Freq))$word
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)+
coord_flip()
pal<-brewer.pal(8,"Dark2")
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 10,
max.words = 100,
scale = 3,
random.color = T,
random.order = T)
wordcloud(word=df$words,
freq = df$Freq,
colors=pal,
min.freq = 10,
max.words = 100,
scale = 3,
random.color = T,
random.order = T)
str(df)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 10,
max.words = 100,
scale = 3,
random.color = T,
random.order = T)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 10,
max.words = 100,
scale = 3)
wordcloud(words=df$words,
freq = df$Freq)
pal<-brewer.pal(8,"Dark2")
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 10,
max.words = 100)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 10,
max.words = 50)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 3,
max.words = 50)
df
wordcloud(words=top20$words,
freq = top20$Freq,
colors=pal,
min.freq = 3,
max.words = 50)
top20
str(top20)
top20
top20$words
df<-as.data.frame(table(words),stringsAsFactors = F) #vector->table(빈도수)->df(factor없이)
str(df)
#요 흐름대로 하면 어렵지 않게 단어들을 추출해 낼 수 있다
text<-read.csv("Data/twitter.csv",header=T,fileEncoding = "UTF-8")
text
str(text)
text<-rename(text,no=번호,id=계정이름,date=작성일,tw=내용)
str(text)
text$tw<-str_replace_all(text$tw,"\\W"," ")
library(stringr)
text$tw<-str_replace_all(text$tw,"\\W"," ")
head(text$tw)
nouns<-extractNoun(text$tw) #list형식으로 명사들 뽑아내고
nouns
words<-unlist(nouns) #list 형식을 vector로 전환!
words
df<-as.data.frame(table(words),stringsAsFactors = F) #vector->table(빈도수)->df(factor없이)
str(df)
top20<-df %>%
filter(nchar(words)>=2) %>%
arrange(Freq) %>%
tail(20)
top20
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)+
coord_flip()
pal<-brewer.pal(8,"Dark2")
wordcloud(words=top20$words,
freq = top20$Freq,
colors=pal,
min.freq = 200,
max.words = 50)
order<-arrange(top20,desc(Freq))$word
top20<-arrange(top20,desc(Freq))
ggplot(data=top20,aes(x=words,y=Freq))+
geom_col()+
ylim(0,2500)+
geom_text(aes(label=Freq), hjust=-0.3)+
scale_x_discrete(limit=order)+
coord_flip()
str(df)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 200,
max.words = 50)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 200,
max.words = 50,
random.color = T,
random.order = F)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 100,
max.words = 50,
random.color = T,
random.order = F)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 50,
max.words = 50,
random.color = T,
random.order = F)
wordcloud(words=df$words,
freq = df$Freq,
colors=pal,
min.freq = 50,
max.words = 200,
random.color = T,
random.order = F)
#spss파일 읽기
install.packages("foreign")
library(foreign)
?Foreign
?foreign
?foreign
??foreign
library(redaxl)
library(readxl)
raw_welfare<-read.spss("Data/Koweps.sav",to.data.frame = T)
raw_welfare
class(raw_welfare)
str(raw_welfare)
welfare<-raw_welfare
View(welfare)
summary(welfare)
str(raw_welfare)
#우리가 추출해야할 것
welfare<-rename(welfare,
sex=h10_g3,
birth=h10_g4,
marriage=h10_g10,
religion=h10_g11,
income=p1002_8aq1,
code_job=h10_eco9,
code_region=h10_reg7
)
str(welfare)
#성별에 따라 월급이 차이가 있을까?
qplot(welfare$sex,welfare$income)
#성별에 따라 월급이 차이가 있을까?
plot(welfare$sex,welfare$income)
#성별에 따라 월급이 차이가 있을까?
class(welfare$sex)
table(is.na(welfare$sex))
welfare$sex<-ifelse(welfare$sex==1,NA,welfare$sex)
welfare$sex
welfare<-raw_welfare
summary(welfare)
#우리가 추출해야할 것
welfare<-rename(welfare,
sex=h10_g3, #성별
birth=h10_g4, #연도
marriage=h10_g10, #혼인여부
religion=h10_g11, #종교
income=p1002_8aq1, #급여
code_job=h10_eco9, #직종코드
code_region=h10_reg7 #지역코드
)
# welfare$sex<-ifelse(welfare$sex==1,NA,welfare$sex)
welfare$sex
qplot(welfare$sex,table(welfare$income))
qplot(welfare$sex)
table(welfare$income)
class(welfare$income)
summary(welfare$income)
welfare %>%
group_by(sex) %>%
summarise(meanIncome=mean(income))
welfare %>%
group_by(sex) %>%
summarise(meanIncome=mean(income, na.rm = T))
df<-welfare %>%
group_by(sex) %>%
summarise(meanIncome=mean(income, na.rm = T))
qplot(df)
qplot(data=df,x=sex,y=meanIncome)
summary(welfare$income)
qplot(data=df,x=sex,y=meanIncome, geom = "bar")
qplot(data=df,x=sex,y=meanIncome, geom = "line")
qplot(data=df,x=sex,y=meanIncome)
qplot(data=df2,x=sex,y=meanIncome)
df2<-welfare %>%
group_by(code_job) %>%
summarise(meanIncome=mean(income, na.rm = T))
qplot(data=df2,x=sex,y=meanIncome)
df2
qplot(welfare$income)
qplot(welfare$income) + xlim(0,1000)
qplot(data=df2,x=code_job,y=meanIncome)
#0, 9999
ifelse(welfare$income %in% c(0,9999),NA,welfare$income)
#0, 9999 : 이상치 값에 대한 결측처리
x<-ifelse(welfare$income %in% c(0,9999),NA,welfare$income)
x
table(in.na(x))
table(is.na(x))
df
ggplot(data=df,aes(x=sex,y=meanIncome)) + geom_col()
ggplot(data=df2,aes(x=code_job,y=meanIncome)) + geom_col()
str(df2$code_job)
#몇 살때 최고급여?
df3<-welfare %>%
group_by(birth) %>%
summarise(meanIncome=mean(income,na.rm = T))
df3
#몇 살때 최고급여?
df3<-welfare %>%
filter(!is.na(income)) %>%
filter(!is.na(birth)) %>%
group_by(birth) %>%
summarise(meanIncome=mean(income,na.rm = T))
df3
ggplot(data=df3,aes(x=birth,y=meanIncome))+geom_line()
summary(welfare$birth)
table(is.na(welfare$birth))
#만일 연도가 9999(미응답) : 이라면 NA처리 해주고프다
ifelse(welfare$birth==9999,NA,welfare$birth)
ggplot(data=df3,aes(x=birth,y=meanIncome,col=lg))+geom_line()
ggplot(data=df3,aes(x=birth,y=meanIncome,col="lg"))+geom_line()
str(df3)
welfare$age<-2019-welfare$birth+1
ggplot(data=df3,aes(x=age,y=meanIncome))+geom_line()
#몇 살때 최고급여?
df3<-welfare %>%
filter(!is.na(income)) %>%
filter(!is.na(birth)) %>%
group_by(birth) %>%
summarise(meanIncome=mean(income,na.rm = T))
welfare$age<-2019-welfare$birth+1
ggplot(data=df3,aes(x=age,y=meanIncome))+geom_line()
#몇 살때 최고급여?
df3<-welfare %>%
filter(!is.na(income)) %>%
filter(!is.na(age)) %>%
group_by(age) %>%
summarise(meanIncome=mean(income,na.rm = T))
welfare$age<-2019-welfare$birth+1
ggplot(data=df3,aes(x=age,y=meanIncome))+geom_line()
qplot(welfare$age)
ggplot(data=df3,aes(x=age,y=meanIncome))+geom_line()
ggplot(data=df3,aes(x=age,y=meanIncome))+geom_line()+theme_bw()
ggplot(data=df3,aes(x=age,y=meanIncome))+
geom_line()+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey60", linetype = "dashed"))
#몇 살때 최고급여?
#항상 하기 전에 na가 있나없나 확인해야함!
table(is.na(welfare$income))
#연령대별 1~20 / 21~40 ... 연령대별 평균 임금 확인
welfare$group<-ifelse(welfare$age<=20&welfare$age>=0,"child",
ifelse(welfare$age<=40,"youth",
ifelse(welfare$age<=60,"littleold",
ifelse(welfare$age<=80,"quiteold","superold"))))
welfare$group
df4<-welfare %>%
group_by(group) %>%
summarize(meanIncome=mean(income,na.rm = T))
ggplot(df4)
qplot(df4)
df4
table(welfare$group)
df5<-welfare %>%
filter(group=="child")
df5$income
welfare$income<-ifelse(is.na(income),0,welfare$income)
df4<-welfare %>%
group_by(group) %>%
summarize(meanIncome=mean(income,na.rm = T))
table(welfare$group)
df5<-welfare %>%
filter(group=="child")
df5$income
welfare$income
qplot(df4)
df5$income
table(welfare$group)
welfare$group
qplot(welfare$age)
table(welfare$group)
ggplot(data=df4,aes(x=group,y=meanIncome))+geom_col()
ggplot(data=df3,aes(x=age,y=meanIncome))+
geom_line()+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey60", linetype = "dashed"))
